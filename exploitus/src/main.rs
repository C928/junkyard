mod exploitus;
mod gui;
mod utils;

use exploitus::{dns_exfiltrator, exploit_server};
use std::collections::VecDeque;
use utils::ExpConfig;

use crate::gui::exploitus_gui::DEF_LOG_FILE;
use crate::utils::gui_utils::{remove_exploitus_file, save_config_in_file};
use crate::utils::user_interact::custom_print;
use std::env;

fn main() -> std::io::Result<()> {
    let mut response_file = String::new();
    let mut log_file = String::from(DEF_LOG_FILE);
    let mut msg_deque = VecDeque::new();
    let mut conf_struct = ExpConfig::new(&mut response_file, &mut log_file, &mut msg_deque);
    let mut opt_vec: Vec<String> = env::args().collect();
    match conf_struct.parse_args(&mut opt_vec) {
        Some(ret) => conf_struct = ret,
        None => return Ok(()),
    };

    if conf_struct.gui_mode {
        //todo: remove (temporary solution)
        remove_exploitus_file(&mut conf_struct, ".msg_deque"); //todo: call it inside App::on_exit() ?
        save_config_in_file(&mut conf_struct);
        gui::exploitus_gui::start_gui();
    } else {
        match conf_struct.tool_type {
            0 => {
                if exploitus::exploit_server::start_server(&mut conf_struct) == 1 {
                    custom_print(
                        &mut conf_struct,
                        "[-] error: exploit server failed to start",
                        false,
                    );
                }
            }
            1 => {
                if exploitus::dns_exfiltrator::start_server(&mut conf_struct) == 1 {
                    custom_print(
                        &mut conf_struct,
                        "[-] error: dns exfiltrator server failed to start",
                        false,
                    );
                }
            }
            _ => (),
        }
    }

    Ok(())
}

//todo: global ===================================================
//todo: response to request coming from specific page (specified in http headers) or host
//todo: dns query receiving
//todo: disown process (for GUI) to detach from terminal (--detach) -> default setting in GUI mode (add --no-detach)
//todo: also add --detach for terminal mode (default is --no-detach)

// todo: first ===================================================
//todo: mkdir for tools (containing exploit_server.rs (formaly exploitus.rs) and dns_exfiltrator.rs)
//todo: fix custom_print() in exploitus.rs not showing in GUI | ~ok
//todo: clear button for exploitus messages | ~ok
//todo: start server in another thread when gui mode
//todo: file encryption and integrity
//todo: handle https
//todo: on exit -> delete (or truncate) useless files
//todo: add possibility to save configuration
//todo: max size for TextEdit
//todo: default size of GUI on startup (to enhance logs preview)
//todo: manage response_file does not exists at beginning instead of when responding
//todo: syntax highlight the \n et \r in gui

//todo: last =======================================================
//todo: implement multiple themes for the GUI
//todo: limit usage of clone()
//todo: refactor library usage (use in specific modules)
//todo: test all errors
